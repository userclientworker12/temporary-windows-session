name: Temporary Windows RDP Session via ngrok

on:
  workflow_dispatch: # Manual trigger

jobs:
  windows_rdp_session:
    name: Start Temporary Windows RDP Session (Max 6 hours)
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Prepare Runner for RDP and Generate Password
        id: prepare_rdp
        shell: pwsh
        run: |
          # --- Generate and Set Password ---
          $password = -join ((65..90) + (97..122) + (48..57) + (33..47) | Get-Random -Count 16 | % {[char]$_})
          $username = $env:USERNAME # Get the current runner username (e.g., runneradmin)
          Write-Host "Setting password for user '$username'..."
          # Use net user command to set password
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          try {
              net user $username $password
              Write-Host "Password set successfully for $username."
          } catch {
              Write-Error "Failed to set password for $username. Error: $_"
              exit 1 # Fail the job if password cannot be set
          }

          # Mask the password in logs
          Write-Host "::add-mask::$password"
          # Set outputs for later steps
          echo "rdp_username=$username" >> $env:GITHUB_OUTPUT
          echo "rdp_password=$password" >> $env:GITHUB_OUTPUT
          Write-Host "Generated temporary RDP password for user $username."

          # --- Enable RDP ---
          Write-Host "Enabling Remote Desktop..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0 -Force

          # --- Configure Firewall ---
          Write-Host "Configuring Windows Firewall for RDP..."
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

          # Optional: Disable Network Level Authentication (NLA) - Less secure, might help compatibility in weird network setups
          # Uncomment the next line if you face NLA-related connection issues (try without it first!)
          # Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 0 -Force
          # Write-Host "NLA Disabled (Less Secure)."


          # Optional: Verify RDP Service is running
          $rdpService = Get-Service -Name TermService
          Write-Host "Remote Desktop Service (TermService) status: $($rdpService.Status)"
          if ($rdpService.Status -ne 'Running') {
              Write-Host "Attempting to start TermService..."
              Start-Service -Name TermService
              Start-Sleep -Seconds 5 # Give it a moment to start
              $rdpService = Get-Service -Name TermService
              Write-Host "New TermService status: $($rdpService.Status)"
          }

          Write-Host "Runner preparation complete."

      - name: Start ngrok tunnel for RDP (Port 3389)
        uses: ngrok/ngrok-github-action@v1.1.0
        id: ngrok # Give the step an ID to access its output
        with:
          # Port RDP server listens on
          port: 3389
          # Protocol is TCP
          protocol: tcp
          # Your ngrok authtoken from GitHub secrets
          authtoken: ${{ secrets.NGROK_AUTHTOKEN }}
          # Optional: Define a specific ngrok subdomain/region if you have a paid plan
          # domain: your-reserved-domain.ngrok.io
          # region: us

      # IMPORTANT: This step keeps the job running!
      - name: Display Connection Info and Keep Job Alive
        shell: pwsh
        env:
          RDP_USERNAME: ${{ steps.prepare_rdp.outputs.rdp_username }}
          RDP_PASSWORD: ${{ steps.prepare_rdp.outputs.rdp_password }}
          NGROK_URL: ${{ steps.ngrok.outputs.url }} # Get public URL from ngrok step
        run: |
          Write-Host "-----------------------------------------------------"
          Write-Host "RDP Session Ready (via ngrok Tunnel)"
          Write-Host "-----------------------------------------------------"
          Write-Host "Use Remote Desktop Connection on your local machine:"
          Write-Host "Computer:      ${{ steps.ngrok.outputs.url }}" # Example: tcp://0.tcp.ngrok.io:12345
          Write-Host "Username:      $env:RDP_USERNAME"
          Write-Host "Password:      $env:RDP_PASSWORD"
          Write-Host "-----------------------------------------------------"
          Write-Host "IMPORTANT NOTES:"
          Write-Host "* The address looks like 'tcp://HOSTNAME:PORT'."
          Write-Host "* In Remote Desktop Connection, enter HOSTNAME:PORT"
          Write-Host "*   (e.g., '2.tcp.ngrok.io:12345') as the 'Computer'."
          Write-Host "* Performance will likely be POOR and LAGGY."
          Write-Host "* This session will automatically end when the job times out (~6 hours) or is cancelled."
          Write-Host "-----------------------------------------------------"

          # Keep the script running
          Write-Host "Keeping job alive... Session active until timeout or cancellation."
          Start-Sleep -Seconds 21000 # ~5 hours 50 minutes

      # Final step, runs when job ends/is cancelled
      - name: Session Ending
        if: always()
        shell: pwsh
        run: |
          Write-Host "RDP session job is ending."
          # Maybe try to disable RDP again? (Might not execute if job is killed)
          # Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 1 -Force -ErrorAction SilentlyContinue
